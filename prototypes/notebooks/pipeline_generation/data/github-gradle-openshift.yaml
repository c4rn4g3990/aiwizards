name: CI/CD Pipeline

on:
  push:
    branches:
      - master

env:
  GRADLE_HOME: Gradle
  DOCKER_CREDENTIALS_ID: your-docker-credentials
  DOCKER_IMAGE: 'your-docker-image-name'
  OPENSHIFT_PROJECT_DEV: 'your-openshift-project-dev'
  OPENSHIFT_PROJECT_PROD: 'your-openshift-project-prod'
  OPENSHIFT_APP_NAME: 'your-app-name'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check-out
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Setup Gradle
        uses: gradle/wrapper-validation-action@v1

      - name: Build and Unit tests
        run: ${{ env.GRADLE_HOME }}/bin/gradle test

      - name: Linters
        run: ${{ env.GRADLE_HOME }}/bin/gradle checkstyleMain

      - name: SonarQube Analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Jacoco
        run: ${{ env.GRADLE_HOME }}/bin/gradle jacocoTestReport

      - name: Dependency scan and update
        run: |
          dependencyMagic scan --project-path .
          dependencyMagic update --project-path .

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.run_number }} .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}

      - name: Deploy to OpenShift Development Environment
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }}
          oc project ${{ env.OPENSHIFT_PROJECT_DEV }}
          oc new-app . --name=${{ env.OPENSHIFT_APP_NAME }}
          oc rollout latest ${{ env.OPENSHIFT_APP_NAME }}

      - name: Integration Tests
        run: ${{ env.GRADLE_HOME }}/bin/gradle integrationTest

      - name: Performance Tests
        run: jmeter -n -t test_plan.jmx -l result.jtl

      - name: Promote to OpenShift Production Environment
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }}
          oc project ${{ env.OPENSHIFT_PROJECT_PROD }}
          oc tag ${{ env.OPENSHIFT_APP_NAME }}:latest ${{ env.OPENSHIFT_APP_NAME }}:prod
          oc rollout latest ${{ env.OPENSHIFT_APP_NAME }}        

      - name: Clean Workspace
        if: always()
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            fs.rmdirSync(process.env.GITHUB_WORKSPACE, { recursive: true });