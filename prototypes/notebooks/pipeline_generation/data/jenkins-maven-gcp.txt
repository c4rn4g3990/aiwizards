pipeline {
    agent any
    environment {
        MAVEN_HOME = tool 'Maven'
        DOCKER_CREDENTIALS_ID = 'your-docker-credentials'
        DOCKER_IMAGE = 'your-docker-image-name'
        GCP_PROJECT_DEV = 'your-gcp-project-dev'
        GCP_PROJECT_PROD = 'your-gcp-project-prod'
        GCP_APP_NAME = 'your-app-name'
        GCR_HOST = 'gcr.io'
    }
    stages {
        stage('Check-out') {
            steps {
                git credentialsId: 'your-git-credentials', url: 'https://github.com/your/repo.git', branch: 'master'
            }
        }
        stage('Build and Unit tests') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn verify"
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Linters') {
            steps {
                // replace with your specific linter
                sh 'mvn checkstyle:check'
            }
            post {
                failure {
                    notifyFailureToPullRequest('Linters stage failed.')
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                }
            }
            post {
                failure {
                    notifyFailureToPullRequest('SonarQube Analysis stage failed.')
                }
            }
        }
        stage('Jacoco') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn jacoco:report"
                jacoco(execPattern: '**/target/*.exec')
            }
            post {
                failure {
                    notifyFailureToPullRequest('Jacoco stage failed.')
                }
            }
        }
        stage('Dependency scan and update') {
            steps {
                sh 'dependencyMagic scan --project-path .'
                sh 'dependencyMagic update --project-path .'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                    docker.withRegistry('https://your-docker-registry.com', "${DOCKER_CREDENTIALS_ID}") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Push Docker Image to GCR') {
            steps {
                script {
                    sh 'gcloud auth configure-docker'
                    sh 'docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${GCR_HOST}/${GCP_PROJECT_DEV}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}'
                    sh 'docker push ${GCR_HOST}/${GCP_PROJECT_DEV}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}'
                }
            }
        }
        stage('Deploy to GCP Development Environment') {
            steps {
                script {
                    sh 'gcloud run deploy ${GCP_APP_NAME} --image ${GCR_HOST}/${GCP_PROJECT_DEV}/${DOCKER_IMAGE}:${env.BUILD_NUMBER} --platform managed --region us-central1 --allow-unauthenticated'
                }
            }
        }
        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                // replace with your specific integration testing framework
                sh "${MAVEN_HOME}/bin/mvn integration-test"
            }
        }
        stage('Performance Tests') {
            steps {
                echo 'Running performance tests...'
                // replace with your specific performance testing tool
                sh 'jmeter -n -t test_plan.jmx -l result.jtl'
            }
        }
        stage('Promote to GCP Production Environment') {
            when {
                expression { input message: 'Are you sure you want to deploy to production?', submitter: 'authorized-submitter' }
            }
            steps {
                script {
                    sh 'docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${GCR_HOST}/${GCP_PROJECT_PROD}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}'
                    sh 'docker push ${GCR_HOST}/${GCP_PROJECT_PROD}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}'
                    sh 'gcloud run deploy ${GCP_APP_NAME} --image ${GCR_HOST}/${GCP_PROJECT_PROD}/${DOCKER_IMAGE}:${env.BUILD_NUMBER} --platform managed --region us-central1 --allow-unauthenticated'
                }
            }
        }
    }
    post {
        always {
            script {
                // Check for stage failure status here. The status will be null if the stage has not failed.
                if (currentBuild.result != 'SUCCESS') {
                    echo 'One or more stages failed.'
                    notifyFailureToPullRequest("Build failed at stage: ${currentBuild.currentStage}")
                } else {
                    echo 'All stages executed successfully.'
                }
            }
            cleanWs()
        }
        success {
            notifyBuildStatusToSlack('SUCCESS')
        }
        failure {
            notifyBuildStatusToSlack('FAILURE')
        }
    }
}

def notifyFailureToPullRequest(String comment) {
    // Implement the logic to add a comment to the pull request, notifying about the stage failure
    // Use appropriate API or plugins to interact with your source control system (e.g., GitHub API, Jenkins GitHub Pull Request Plugin)
    // The string parameter 'comment' contains a specific message about the failure
}

def notifyBuildStatusToSlack(status) {
    // Implement the logic to send build status notifications to Slack or any other messaging platform
    // Use Slack API, Jenkins Slack Plugin, or any other relevant integration
    // Send a message with the build status (success or failure) to the desired channel or recipient
}
